class Domain:
    def __init__(self, domain):
        self.domain = domain
        self.domaininfo = self.domainDescription()

    def domainDescription(self):
        if self.domain == "Eukarya":
            return "Eukarya is a domain that contains organisms with eukaryotic cells, which have a defined nucleus."
        else:
            return "Unknown domain"

class Kingdom(Domain):
    def __init__(self, kingdom, domain):
        super().__init__(domain)
        self.kingdom = kingdom
        self.kingdominfo = self.kingdomDescription()
        
    def kingdomDescription(self):
        if self.kingdom == "Animalia":
            return "The Animalia kingdom includes multicellular, eukaryotic organisms that eat other organisms, can move, and usually reproduce sexually."
        else:
            return "Unknown kingdom"

class Phylum(Kingdom):
    def __init__(self, phylum, kingdom, domain):
        super().__init__(kingdom, domain)
        self.phylum = phylum
        self.phyluminfo = self.phylumDescription()
        
    def phylumDescription(self):
        if self.phylum == "Chordata":
            return "The Chordata phylum consists of animals that have, at some stage of their life, a notochord, a dorsal nerve cord, pharyngeal slits, and a post-anal tail."
        else:
            return "Unknown phylum"
        
class Class(Phylum):
    def __init__(self, class_, phylum, kingdom, domain):
        super().__init__(phylum, kingdom, domain)
        self.class_ = class_
        self.classinfo = self.classDescription()
        
    def classDescription(self):
        if self.class_ == "Mammalia":
            return "The Mammalia class includes warm-blooded animals that have hair or fur, give live birth (except for monotremes), and nurse their young with milk."
        else:
            return "Unknown class"
        
class Order(Class):
    def __init__(self, order, class_, phylum, kingdom, domain):
        super().__init__(class_, phylum, kingdom, domain)
        self.order = order
        self.orderinfo = self.orderDescription()
        
    def orderDescription(self):
        if self.order == "Carnivora":
            return "The Carnivora order includes animals that primarily eat meat, have sharp teeth and claws for hunting, and include species like cats, dogs, and bears."
        else:
            return "Unknown order"

class Family(Order):
    def __init__(self, family, order, class_, phylum, kingdom, domain):
        super().__init__(order, class_, phylum, kingdom, domain)
        self.family = family
        self.familyinfo = self.familyDescription()
        
    def familyDescription(self):
        if self.family == "Ursidae":
            return "The Ursidae family includes large, mainly omnivorous mammals known as bears, characterized by their robust bodies, thick fur, and plant- and meat-based diets."
        else:
            return "Unknown family"

class Genus(Family):
    def __init__(self, genus, family, order, class_, phylum, kingdom, domain):
        super().__init__(family, order, class_, phylum, kingdom, domain)
        self.genus = genus
        self.genusinfo = self.genusDescription()
        
    def genusDescription(self):
        if self.genus == "Ursus":
            return "The Ursus genus includes large bear species."
        elif self.genus == "Tremarctos":
            return "The Tremarctos genus includes the Andean bear, also known as the spectacled bear, which is the only bear species native to South America, characterized by its unique facial markings and primarily herbivorous diet."
        elif self.genus == "Ailuropoda":
            return "The Ailuropoda genus includes the giant panda (Ailuropoda melanoleuca), a bear species native to China, known for its distinctive black and white fur and primarily bamboo-based diet."
        else:
            return "Unknown genus"

class Species(Genus):
    def __init__(self, species, genus, family, order, class_, phylum, kingdom, domain):
        super().__init__(genus, family, order, class_, phylum, kingdom, domain)
        self.species = species
        self.speciesinfo = self.speciesDescription()
        
    def speciesDescription(self):
        if self.species == "Ursus maritimus":
            return "Also known as the polar bear, is a large bear native to the Arctic region, primarily adapted to cold environments, with a diet mainly consisting of seals and a strong reliance on sea ice for hunting."
        elif self.species == "Ursus arctos horribilis":
            return "A subspecies of the brown bear, commonly known as the grizzly bear. It is found primarily in North America, particularly in parts of Canada and the United States."
        elif self.species == "Tremarctos ornatus":
            return "The spectacled bear is the only bear species native to South America. It is named for the distinctive white or light-colored fur around its eyes, which gives it the appearance of wearing spectacles."
        elif self.species == "Ailuropoda melanoleuca":
            return "The giant panda is a bear species native to China, easily recognized by its black and white fur, and primarily herbivorous, with bamboo making up the majority of its diet."
        else:
            return "Unknown species"

def polarBear():
    print("ENTRY 001 - POLAR BEAR\n")
    
    PB = Species("Ursus maritimus", "Ursus", "Ursidae", "Carnivora", "Mammalia", "Chordata", "Animalia", "Eukarya")
    
    print("\nTAXONOMY:")
    print(f"Domain: {PB.domain} - {PB.domaininfo} \n")
    print(f"Kingdom: {PB.kingdom} - {PB.kingdominfo} \n")
    print(f"Phylum: {PB.phylum} - {PB.phyluminfo} \n")
    print(f"Class: {PB.class_} - {PB.classinfo} \n")
    print(f"Order: {PB.order} - {PB.orderinfo} \n")
    print(f"Family: {PB.family} - {PB.familyinfo} \n")
    print(f"Genus: {PB.genus} - {PB.genusinfo} \n")
    print(f"Species: {PB.species} - {PB.speciesinfo} \n")
    
    print("\nIMAGE:")
    print("insert image here")

def grizzlyBear():
    print("ENTRY 002 - GRIZZLY BEAR\n")
    
    GB = Species("Ursus arctos horribilis", "Ursus", "Ursidae", "Carnivora", "Mammalia", "Chordata", "Animalia", "Eukarya")
    
    print("\nTAXONOMY:")
    print(f"Domain: {GB.domain} - {GB.domaininfo} \n")
    print(f"Kingdom: {GB.kingdom} - {GB.kingdominfo} \n")
    print(f"Phylum: {GB.phylum} - {GB.phyluminfo} \n")
    print(f"Class: {GB.class_} - {GB.classinfo} \n")
    print(f"Order: {GB.order} - {GB.orderinfo} \n")
    print(f"Family: {GB.family} - {GB.familyinfo} \n")
    print(f"Genus: {GB.genus} - {GB.genusinfo} \n")
    print(f"Species: {GB.species} - {GB.speciesinfo} \n")
    
    print("\nIMAGE:")
    print("insert image here")
    
def spectacledBear():
    
    print("ENTRY 003 - SPECTACLED BEAR\n")
  
    SB = Species("Tremarctos ornatus", "Tremarctos", "Ursidae", "Carnivora", "Mammalia", "Chordata", "Animalia", "Eukarya")
  
    print("\nTAXONOMY:")
    print(f"Domain: {SB.domain} - {SB.domaininfo} \n")
    print(f"Kingdom: {SB.kingdom} - {SB.kingdominfo} \n")
    print(f"Phylum: {SB.phylum} - {SB.phyluminfo} \n")
    print(f"Class: {SB.class_} - {SB.classinfo} \n")
    print(f"Order: {SB.order} - {SB.orderinfo} \n")
    print(f"Family: {SB.family} - {SB.familyinfo} \n")
    print(f"Genus: {SB.genus} - {SB.genusinfo} \n")
    print(f"Species: {SB.species} - {SB.speciesinfo} \n")
  
  
def giantPanda():
    
    print("ENTRY 004 - GIANT PANDA")
    
    GP = Species("Ailuropoda melanoleuca", "Ailuropoda", "Ursidae", "Carnivora", "Mammalia", "Chordata", "Animalia", "Eukarya")
    
    print("\nTAXONOMY:")
    print(f"Domain: {GP.domain} - {GP.domaininfo} \n")
    print(f"Kingdom: {GP.kingdom} - {GP.kingdominfo} \n")
    print(f"Phylum: {GP.phylum} - {GP.phyluminfo} \n")
    print(f"Class: {GP.class_} - {GP.classinfo} \n")
    print(f"Order: {GP.order} - {GP.orderinfo} \n")
    print(f"Family: {GP.family} - {GP.familyinfo} \n")
    print(f"Genus: {GP.genus} - {GP.genusinfo} \n")
    print(f"Species: {GP.species} - {GP.speciesinfo} \n")
    
def titleScreen():
    print("======================")
    print("|      URSADEX       |")
    print("======================")

titleScreen()
giantPanda()
